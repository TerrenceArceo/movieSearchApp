{"version":3,"sources":["MovieCard.js","SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","props","className","src","movie","poster_path","alt","title","release_date","vote_average","overview","id","SearchMovies","useState","query","setQuery","movies","setMovies","search","e","a","preventDefault","url","fetch","response","json","data","console","log","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAmBeA,MAjBf,SAAmBC,GACf,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYC,IAAG,0DAAqDF,EAAMG,MAAMC,aAC3FC,IAAKL,EAAMG,MAAMG,MAAQ,YAE7B,sBAAKL,UAAU,gBAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BD,EAAMG,MAAMG,QACzC,uBACA,+CAAkBN,EAAMG,MAAMI,gBAC9B,yCAAYP,EAAMG,MAAMK,gBACxB,mBAAGP,UAAU,aAAb,SAA2BD,EAAMG,MAAMM,gBATpBT,EAAMG,MAAMO,KCwChCC,MAzCf,WACI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAM,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACXD,EAAEE,iBAEIC,EAHK,kHAG4GR,EAH5G,iDAMgBS,MAAMD,GANtB,cAMDE,EANC,gBAOYA,EAASC,OAPrB,OAODC,EAPC,OAQPC,QAAQC,IAAIF,EAAKG,SACjBZ,EAAUS,EAAKG,SATR,kDAWPF,QAAQG,MAAR,MAXO,0DAAH,sDAiBZ,OACI,qCACI,uBAAM5B,UAAU,OAAO6B,SAAUb,EAAjC,UACI,uBAAOc,QAAQ,QAAf,oBACA,uBAAO9B,UAAU,QACb+B,KAAK,OACLC,KAAK,QACLC,YAAY,qBACZC,MAAOtB,EACPuB,SAAU,SAAClB,GAAD,OAAOJ,EAASI,EAAEmB,OAAOF,UAEvC,wBAAQlC,UAAU,SAAS+B,KAAK,SAAhC,uBAEJ,qBAAK/B,UAAU,YAAf,SACKc,EAAOuB,QAAO,SAAAnC,GAAK,OAAIA,EAAMC,eAAamC,KAAI,SAAApC,GAAK,OAAI,cAAC,EAAD,CAAWA,MAAOA,aC1B3EqC,MATf,WACE,OACI,sBAAKvC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,QCKOwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,M","file":"static/js/main.b7fed1eb.chunk.js","sourcesContent":["import React from 'react'\n\nfunction MovieCard(props) {\n    return (\n        <div className=\"card\" key={props.movie.id}>\n            <img className=\"card--img\" src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${props.movie.poster_path}`} \n                alt={props.movie.title + ' poster'}\n            />\n            <div className=\"card--content\">\n                <h3 className=\"card--title\">{props.movie.title}</h3>\n                <hr />\n                <p>RELEASE DATE: {props.movie.release_date}</p>\n                <p>RATING: {props.movie.vote_average}</p>\n                <p className=\"card--desc\">{props.movie.overview}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieCard","import React, {useState} from 'react'\nimport MovieCard from './MovieCard'\n\nfunction SearchMovies() {\n    const [query, setQuery] = useState('')\n    const [movies, setMovies] = useState([])\n    \n    const search = async (e) => {\n        e.preventDefault()\n        \n        const url = `https://api.themoviedb.org/3/search/movie?api_key=9bc4cf704d1af71144c3bba8b90ba2b3&language=en-US&query=${query}&page=1&include_adult=false`\n        \n        try {\n            const response = await fetch(url)\n            const data = await response.json()\n            console.log(data.results)\n            setMovies(data.results)\n        }catch(err) {\n            console.error(err)\n        }\n        \n    }\n    \n    \n    return (\n        <>\n            <form className=\"form\" onSubmit={search}>\n                <label htmlFor=\"query\">Title:</label>\n                <input className=\"input\"\n                    type=\"text\"\n                    name=\"query\"\n                    placeholder=\".i.e Black Panther\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                />\n                <button className=\"button\" type=\"submit\">Search</button>\n            </form>\n            <div className=\"card-list\">\n                {movies.filter(movie => movie.poster_path).map(movie => <MovieCard movie={movie}/> )}\n            </div>\n        </>\n    )\n}\n\nexport default SearchMovies","import React from 'react'\nimport SearchMovies from './SearchMovies'\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <h1 className=\"title\">Movie Search App</h1>\n        <SearchMovies />\n      </div>\n  ) \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport style from \"./style.css\"\n\nReactDOM.render(\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}